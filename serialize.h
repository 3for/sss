#ifndef sss_SERIALIZE_H
#define sss_SERIALIZE_H

#include "hazmat.h"
#include "sss.h"
#include <inttypes.h>

#define sss_KEYSHARE_SERIALIZED_LEN 33 /* 1 + 32 */
#define sss_SHARE_SERIALIZED_LEN (sss_CLEN + sss_KEYSHARE_SERIALIZED_LEN)


/*
 * Serialize a `sss_Keyshare` struct into a bytestring pointed to by `out`.
 * The resulting bytestring will be `sss_KEYSHARE_SERIALIZED_LEN` long. The
 * caller must make sure that `out` is large enough to contain this data.
 */
void sss_serialize_keyshare(uint8_t *out, const sss_Keyshare *keyshare);


/*
 * Parse the bytestring `in` that has previously been generated by the
 * `sss_serialize_keyshare` function. This function will write the resulting
 * `sss_Keyshare` struct to the location pointed to by `keyshare`.
 */
void sss_unserialize_keyshare(sss_Keyshare *keyshare, const uint8_t *in);


/*
 * Serialize a `sss_Share` struct into a bytestring pointed to by `out`. The
 * resulting bytestring will be `sss_SHARE_SERIALIZED_LEN` long. The caller must
 * make sure that `out` is large enough to contain this data.
 */
void sss_serialize_share(uint8_t *out, const sss_Share *share);


/*
 * Parse the bytestring `in` that has previously been generated by the
 * `sss_serialize_share` function. This function will write the resulting
 * `sss_Share` struct to the location pointed to by `share`.
 */
void sss_unserialize_share(sss_Share *share, const uint8_t *in);

#endif /* sss_SERIALIZE_H */
